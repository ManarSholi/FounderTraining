1
00:00:00,310 --> 00:00:03,140
编程语言用于让计算机理解人的意图

2
00:00:03,140 --> 00:00:06,769
但随着代码变得越来越复杂

3
00:00:06,769 --> 00:00:10,800
你和其他人也越来越难以理解代码的作用

4
00:00:10,800 --> 00:00:14,530
开发者经常使用注释来帮助大家

5
00:00:14,529 --> 00:00:16,289
以人性化的语言理解代码的含义

6
00:00:16,289 --> 00:00:20,439
在 JavaScript 中 如果要像这样一次写一行注释

7
00:00:20,440 --> 00:00:23,580
可以在双斜杠之后写下任意文本

8
00:00:23,579 --> 00:00:25,949
或者 如果你认为自己需要写一段注释

9
00:00:25,949 --> 00:00:30,039
可以在斜杠星号和星号斜杠之间写下任意文本

10
00:00:30,039 --> 00:00:32,990
JavaScript 解释器不会执行注释

11
00:00:32,990 --> 00:00:35,820
因此 注释可以随意书写

12
00:00:35,820 --> 00:00:38,869
但通常你会尽力写下有帮助的注释

13
00:00:38,869 --> 00:00:41,780
例如 这是我之前写的代码

14
00:00:41,780 --> 00:00:44,870
这段代码的作用对我来说 不是那么一目了然

15
00:00:44,869 --> 00:00:47,549
其中似乎有一个函数、一个 for 循环

16
00:00:47,549 --> 00:00:50,759
以及一些带有糟糕变量名的变量

17
00:00:50,759 --> 00:00:53,599
如果尚未搞懂它们的含义 不必担心

18
00:00:53,600 --> 00:00:58,020
现在要知道的是 如果使用了类似这样的注释

19
00:00:58,020 --> 00:01:00,175
我们都有可能

20
00:01:00,174 --> 00:01:04,319
更容易记住此代码最初的用途

21
00:01:04,319 --> 00:01:07,780
看 现在我可以知道 此函数颠倒单词中的字符顺序

22
00:01:07,780 --> 00:01:12,599
具体来说 它以相反的顺序遍历字符

23
00:01:12,599 --> 00:01:14,379
并将字符添加到新单词中

24
00:01:14,379 --> 00:01:18,500
本课程中的一些练习可能包含注释

25
00:01:18,500 --> 00:01:20,269
它们提示或指导你完成练习

26
00:01:20,269 --> 00:01:22,829
我们鼓励你在自己的代码中使用注释

27
00:01:22,829 --> 00:01:26,390
以解释你在练习中编写的一些难以理解的代码

28
00:01:26,390 --> 00:01:28,930
这不仅能帮助你养成良好的编程习惯

29
00:01:28,930 --> 00:01:31,700
而且 如果要在复习时重看这些练习

30
00:01:31,700 --> 00:01:34,269
还能让你更容易读懂代码

31
00:01:34,269 --> 00:01:38,030
现在该做第一个练习了

32
00:01:38,030 --> 00:01:38,409
祝你好运

