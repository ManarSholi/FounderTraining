1
00:00:00,000 --> 00:00:03,480
The default way that the browser lays out the boxes onto

2
00:00:03,480 --> 00:00:08,220
the page was designed for web pages that work like traditional documents.

3
00:00:08,220 --> 00:00:12,705
They're made of things like headlines, paragraphs, and lists.

4
00:00:12,705 --> 00:00:16,184
Pretty much in order from the top to the bottom.

5
00:00:16,184 --> 00:00:19,844
This works great for pages such as wikipedia articles,

6
00:00:19,844 --> 00:00:22,544
scientific papers or stories.

7
00:00:22,545 --> 00:00:26,645
But, a website today can be a lot more than a document.

8
00:00:26,644 --> 00:00:28,179
It's a photo gallery,

9
00:00:28,179 --> 00:00:30,769
or messaging service, or a game.

10
00:00:30,769 --> 00:00:33,030
So, the kind of layout that makes sense for

11
00:00:33,030 --> 00:00:36,825
a document doesn't always make sense for websites today.

12
00:00:36,825 --> 00:00:42,475
Apps need a much more flexible sort of layout than an article or a novel does.

13
00:00:42,475 --> 00:00:46,145
CSS has grown to support that change over time.

14
00:00:46,145 --> 00:00:48,290
One of the biggest improvements in

15
00:00:48,289 --> 00:00:52,109
the last few years is a feature called the Flexible Box Layout,

16
00:00:52,109 --> 00:00:54,064
or Flexbox for short.

17
00:00:54,064 --> 00:00:58,670
It's a way to ask CSS to change the rules for how boxes are laid out onto

18
00:00:58,670 --> 00:01:03,859
the page in a way that's more flexible than the usual document-based approach.

19
00:01:03,859 --> 00:01:06,620
Let's take a look at what that means.

20
00:01:06,620 --> 00:01:09,890
Here, I'm going to create some boxes with

21
00:01:09,890 --> 00:01:14,075
different background colors so we can see how the layout changes.

22
00:01:14,075 --> 00:01:18,375
Let's make all of them 100 by 100 pixels.

23
00:01:18,375 --> 00:01:23,245
We'll put them inside another element that will act as a container for them.

24
00:01:23,245 --> 00:01:25,950
Then put this into the browser.

25
00:01:25,950 --> 00:01:29,960
Since we're using default document-oriented block layout,

26
00:01:29,959 --> 00:01:35,629
these end up one after the other vertically just like paragraphs in a story.

27
00:01:35,629 --> 00:01:39,774
Now, let's see what happens when I set display,

28
00:01:39,775 --> 00:01:42,510
colon, flex on the container.

29
00:01:42,510 --> 00:01:46,340
Wow. Now, they're side by side.

30
00:01:46,340 --> 00:01:50,935
Okay, so I could do that with float, colon,

31
00:01:50,935 --> 00:01:56,465
left too, but look at what happens if the browser window is resized.

32
00:01:56,465 --> 00:02:00,010
These elements resize to fit the screen.

33
00:02:00,010 --> 00:02:02,404
That's pretty handy, especially,

34
00:02:02,403 --> 00:02:04,549
when you consider someone might be looking at

35
00:02:04,549 --> 00:02:07,924
this on a phone with a really narrow window.

36
00:02:07,924 --> 00:02:11,805
But Flexbox gets us something that floats don't.

37
00:02:11,805 --> 00:02:16,700
We can also configure how we want the box to behave when there's not enough room on

38
00:02:16,699 --> 00:02:21,829
the screen by setting the flex wrap property to the value wrap.

39
00:02:21,830 --> 00:02:27,400
I can make these boxes wrapped down to the next line on a narrow browser Window.

